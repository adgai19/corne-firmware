#include <zmk-helpers/helper.h>
#include <zmk-helpers/keypos_42keys.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define ___ &trans

#define DEF 0  
#define LOWER 1
#define HIGHER 2
#define TRI 3

ZMK_BEHAVIOR(hrm, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    bindings = <&kp>, <&kp>;
)
// MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
// MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs
//
// MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
// MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
// MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

// / {
//   conditional_layers {
//     compatible = "zmk,conditional-layers";
//     tri_layer {
//       if-layers = <1 2>;
//       then-layer = <3>;
//     };
//   };
//   mt {
//     retro-tap;
//   };
//   behaviors {
// skq: sticky_key_quick_release {
//        compatible = "zmk,behavior-sticky-key";
// #binding-cells = <1>;
//        bindings = <&kp>;
//        release-after-ms = <1000>;
//        quick-release;
//        ignore-modifiers;
//      };
// rpi_left: require_prior_idle_l {
//        compatible = "zmk,behavior-hold-tap";
//        flavor = "tap-preferred";
// #binding-cells = <2>;
//        tapping-term-ms = <200>;
//        quick-tap-ms = <200>;
//        require-prior-idle-ms = <125>;
//        bindings = <&kp>, <&kp>;
//        hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;    // <---[[right-hand keys]]
//      };
//
//
// rpi_right: require_prior_idle_r {
//        compatible = "zmk,behavior-hold-tap";
// #binding-cells = <2>;
//        flavor = "tap-preferred";
//        tapping-term-ms = <200>;
//        quick-tap-ms = <200>;
//        require-prior-idle-ms = <125>;
//        bindings = <&kp>, <&kp>;
//        hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;    // <---[[right-hand keys]]
//      };
//
// rpi: require_prior_idle {
//        compatible = "zmk,behavior-hold-tap";
// #binding-cells = <2>;
//        flavor = "tap-preferred";
//        tapping-term-ms = <200>;
//        quick-tap-ms = <200>;
//        require-prior-idle-ms = <125>;
//        bindings = <&kp>, <&kp>;
//      };
// tdc: tap_dance_0 {
//        compatible = "zmk,behavior-tap-dance";
// #binding-cells = <0>;
//        tapping-term-ms = <200>;
//        bindings = <&kp ESC>, <&kp CAPS>;
//      };
// scw: single_quote_caps_word{
//        compatible = "zmk,behavior-tap-dance";
// #binding-cells = <0>;
//        tapping-term-ms = <200>;
//        bindings = <&kp SQT>, <&caps_word>;
//      };
//
//   };
//   combos {
//     compatible = "zmk,combos";
//     combo_ctrl_tab {
//       timeout-ms = <50>;
//       key-positions = <16 19>;
//       bindings = <&kp LC(TAB)>;
//     };
//
//     combo_ctrl_shift_tab {
//       timeout-ms = <50>;
//       key-positions = <16 20>;
//       bindings = <&kp LC(LS(TAB))>;
//     };
//
//     combo_shift_tab {
//       timeout-ms = <50>;
//       key-positions = <16 21>;
//       bindings = <&kp LS(TAB)>;
//     };
//
//     combo_key_repeat {
//       timeout-ms = <50>;
//       key-positions = <3 4>;
//       bindings = <&key_repeat>;
//     };
//   };
//   keymap {
//     compatible = "zmk,keymap";
//
ZMK_LAYER(default_layer,
//       bindings = <
        &kp TAB       &kp Q      &kp D            &kp R           &kp W           &kp B                                 &kp J           &kp F           &kp U           &kp P         &kp SEMI    &kp MINUS
        &kp ESC          &kp A      &hrm LALT S      &hrm LCTRL H    &hrm LGUI T     &kp G                                 &kp Y           &kp N           &hrm LCTRL E   &hrm LALT O    &kp I       &scw
        &skq LSHFT    &kp Z      &kp X            &kp M           &kp C           &kp V       &kp C_MUTE  &none         &kp K           &hrm LGUI L     &kp COMMA       &kp DOT       &kp FSLH    &skq RSFT
                                                  &mo 2           &mt LCTRL TAB   &mt LGUI BSPC                         &mt LSHIFT RET  &mt LALT SPACE  &mo 1
//         >;
)
//
//       sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT>;
//     };
//     lower_layer {
//       bindings = <
//         &kp TAB     &kp F11      &kp F12        &kp K_CUT       &kp K_COPY    &kp K_PASTE                               &kp TAB       &kp BSPC      &kp SPACE     &kp RET     &kp N0  &kp BSPC
//         &bt BT_CLR  &kp F6       &mt LALT F7    &mt LCTRL F8    &mt LGUI F9   &kp F10                                   &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT   &trans  &kp F12
//         &kp LSHFT   &kp F1       &kp F2         &kp F3          &kp F4        &kp F5       &bootloader  &bootloader     &kp C_PP      &kp C_NEXT    &kp C_PREV    &kp CAPS    &trans  &trans
//                                                 &trans          &kp LGUI      &kp SPACE                                 &kp RET       &kp RALT      &trans
//         >;
//
//       sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
//     };
//
//     raise_layer {
//       bindings = <
//         &kp  TAB    &kp EXCL      &kp AT     &kp LBKT          &kp RBKT         &kp PIPE                                &kp EQUAL    &kp N7     &kp N8   &kp N9  &kp STAR  &kp SPC
//         &kp  LCTRL  &kp HASH      &kp DLLR   &mt LSHIFT LPAR   &mt LGUI RPAR    &kp GRAVE                               &kp BSLH     &kp N4     &kp N5   &kp N6  &kp PLUS  &kp LGUI
//         &kp  LSHFT  &kp PERCENT   &kp CARET  &kp LBRC          &kp RBRC         &kp TILDE    &bootloader  &bootloader   &kp AMPS     &kp N1     &kp N2   &kp N3  &kp N0    &key_repeat
//                                                           &trans   &kp LGUI     &kp SPACE                               &kp LALT     &kp BSPC   &trans
//         >;
//
//       sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
//     };
//     tri_layer {
//
//       bindings = <
//         &kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5                           &kp N6     &kp N7    &kp N8  &kp N9      &kp N0    &kp BSPC
//         &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                     &kp LEFT   &kp DOWN  &kp UP  &kp RIGHT   &trans    &kp F12
//         &kp LSHFT   &kp A         &kp F2        &kp F3        &kp F4        &kp F5       &bootloader  &none  &kp F6     &kp F7    &kp F8  &kp F9      &kp F10   &kp F11
//                                                 &trans     &trans       &kp SPACE                            &kp RET    &trans   &trans
//         >;
//
//       sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
//     };
//   };
// };
