#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
  conditional_layers {
    compatible = "zmk,conditional-layers";
    tri_layer {
      if-layers = <1 2>;
      then-layer = <3>;
    };
  };
  mt {
    retro-tap;
  };
  behaviors {
skq: sticky_key_quick_release {
       compatible = "zmk,behavior-sticky-key";
#binding-cells = <1>;
       bindings = <&kp>;
       release-after-ms = <1000>;
       quick-release;
       ignore-modifiers;
     };
rpi: require_prior_idle {
       compatible = "zmk,behavior-hold-tap";
#binding-cells = <2>;
       flavor = "tap-preferred";
       tapping-term-ms = <200>;
       quick-tap-ms = <200>;
       require-prior-idle-ms = <125>;
       bindings = <&kp>, <&kp>;
     };
tdc: tap_dance_0 {
       compatible = "zmk,behavior-tap-dance";
#binding-cells = <0>;
       tapping-term-ms = <200>;
       bindings = <&kp ESC>, <&kp CAPS>;
     };
  };
  combos {
    compatible = "zmk,combos";
    combo_ctrl_tab {
      timeout-ms = <50>;
      key-positions = <16 19>;
      bindings = <&kp LC(TAB)>;
    };

    combo_ctrl_shift_tab {
      timeout-ms = <50>;
      key-positions = <16 20>;
      bindings = <&kp LC(LS(TAB))>;
    };

    combo_shift_tab {
      timeout-ms = <50>;
      key-positions = <16 21>;
      bindings = <&kp LS(TAB)>;
    };

    combo_key_repeat {
      timeout-ms = <50>;
      key-positions = <3 4>;
      bindings = <&key_repeat>;
    };
  };
  keymap {
    compatible = "zmk,keymap";

    default_layer {
      // -------------------------------------------------------------------------------------------------
      // |  TAB |  Q  |  W  |  E  |  R  |  T  |                    |  Y  |  U   |  I  |  O  |  P  | BKSP |
      // | CTRL |  A  |  S  |  D  |  F  |  G  |                    |  H  |  J   |  K  |  L  |  ;  |  '   |
      // | SHFT |  Z  |  X  |  C  |  V  |  B  |  MUTE  |  |        |  N  |  M   |  ,  |  .  |  /  | ESC  |
      //                    | GUI | LWR | SPC |                    | ENT | RSE  | ALT |
      bindings = <
        &kp TAB       &kp Q      &kp D     &kp R     &kp W     &kp B                                 &kp J         &kp F         &kp U       &kp P     &kp SEMI    &kp MINUS
        &tdc   &kp A      &rpi LALT S     &rpi LCTRL H      &rpi LGUI T    &kp G                                 &kp Y         &rpi LGUI N         &rpi LCTRL E       &rpi LALT O     &kp I       &kp SQT
        &skq LSHFT     &kp Z      &kp X     &kp M     &kp C     &kp V       &kp C_MUTE  &none         &kp K         &kp L         &kp COMMA   &kp DOT   &kp FSLH    &skq RSFT
        &mo 2  &mt LCTRL TAB       &mt LGUI BSPC                                   &mt LSHIFT RET  &mt LALT SPACE  &mo 1
        >;

      sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT>;
    };
    lower_layer {
      // ------------------------------------------------------------------------------------------------
      // |  TAB |  1  |  2  |  3  |  4  |  5  |                    |  6  |  7  |  8  |  9  |  0  | BKSP |
      // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |                    | LFT | DWN |  UP | RGT |     |  F12 |
      // | SHFT | F1  | F2  | F3  | F4  | F5  |  boot  |  |        |  F6 | F7  | F8  | F9  | F10 |  F11 |
      //                    | GUI |     | SPC |                    | ENT |     | ALT |
      bindings = <
        &kp TAB    &kp F11      &kp F12      &kp K_CUT    &kp K_COPY   &kp K_PASTE                             &kp TAB     &kp BSPC       &kp SPACE     &kp RET      &kp N0  &kp BSPC
        &bt BT_CLR &kp F6       &mt LALT F7       &mt LCTRL F8        &mt LGUI F9       &kp F10                                &kp LEFT   &kp DOWN     &kp UP     &kp RIGHT   &trans  &kp F12
        &kp LSHFT  &kp F1       &kp F2       &kp F3       &kp F4       &kp F5       &bootloader  &bootloader   &kp C_PP   &kp C_NEXT   &kp C_PREV &kp CAPS    &trans  &trans
        &trans     &kp LGUI       &kp SPACE                               &kp RET    &kp RALT       &trans
        >;

      sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
    };

    raise_layer {
      // ------------------------------------------------------------------------------------------------
      // |  TAB |  !  |  @  |  #  |  $  |  %  |                    |  ^  |  &  |  *  |  (  |  )  | BKSP |
      // | CTRL |     |     |     |     |     |                    |  -  |  =  |  [  |  ]  |  \  |  `   |
      // | SHFT |     |     |     |     |     |        |  |  boot  |  _  |  +  |  {  |  }  | "|" |  ~   |
      //                    | GUI |     | SPC |                    | ENT |     | ALT |
      bindings = <
        &kp  TAB    &kp EXCL      &kp AT     &kp LBKT   &kp RBKT    &kp PIPE                                &kp EQUAL     &kp N7  &kp N8 &kp N9 &kp STAR &kp BSPC
        &kp  LCTRL  &kp HASH      &kp DLLR   &mt LSHIFT LPAR   &mt LGUI RPAR    &kp GRAVE                               &kp BSLH      &kp N4  &kp N5 &kp N6 &kp PLUS &kp LGUI
        &kp  LSHFT  &kp PERCENT   &kp CARET  &kp LBRC   &kp RBRC    &kp TILDE    &bootloader  &bootloader   &kp AMPS     &kp N1  &kp N2  &kp N3 &kp N0 &key_repeat
        &trans   &kp LGUI     &kp SPACE                                           &kp LALT       &kp BSPC    &trans
        >;

      sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
    };
    tri_layer {

      bindings = <
        &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5                           &kp N6   &kp N7   &kp N8 &kp N9    &kp N0  &kp BSPC
        &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                     &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans  &kp F12
        &kp LSHFT  &kp A       &kp F2       &kp F3       &kp F4       &kp F5       &bootloader  &none  &kp F6   &kp F7   &kp F8 &kp F9    &kp F10 &kp F11
        &trans     &trans       &kp SPACE                            &kp RET  &trans   &trans
        >;

      sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
    };
  };
};
